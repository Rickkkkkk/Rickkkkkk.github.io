<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo搭建常见问题</title>
    <url>/2021/09/17/Hexo%E6%90%AD%E5%BB%BA%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h5 id="github设置"><a href="#github设置" class="headerlink" title="github设置"></a>github设置</h5><h5 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#next主题</span><br><span class="line">npm install hexo-theme-next </span><br><span class="line"></span><br><span class="line">#deploy到 git</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line">#图片插件</span><br><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>

<h5 id="图片问题"><a href="#图片问题" class="headerlink" title="图片问题"></a>图片问题</h5><h6 id="Typora-修改"><a href="#Typora-修改" class="headerlink" title="Typora 修改"></a>Typora 修改</h6><p><img src="/2021/09/17/Hexo%E6%90%AD%E5%BB%BA%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/image-20210917101405916.png" alt="image-20210917101405916"></p>
<h6 id="asset-image插件修改"><a href="#asset-image插件修改" class="headerlink" title="asset-image插件修改"></a>asset-image插件修改</h6><p>打开文件/rickBlog/node_modules/hexo-asset-image/index.js，用下面的内容替换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;use strict&#x27;;</span><br><span class="line">var cheerio = require(&#x27;cheerio&#x27;);</span><br><span class="line"></span><br><span class="line">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span><br><span class="line">function getPosition(str, m, i) &#123;</span><br><span class="line">  return str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var version = String(hexo.version).split(&#x27;.&#x27;);</span><br><span class="line">hexo.extend.filter.register(&#x27;after_post_render&#x27;, function(data)&#123;</span><br><span class="line">  var config = hexo.config;</span><br><span class="line">  if(config.post_asset_folder)&#123;</span><br><span class="line">    	var link = data.permalink;</span><br><span class="line">	if(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3)</span><br><span class="line">	   var beginPos = getPosition(link, &#x27;/&#x27;, 1) + 1;</span><br><span class="line">	else</span><br><span class="line">	   var beginPos = getPosition(link, &#x27;/&#x27;, 3) + 1;</span><br><span class="line">	// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span><br><span class="line">	var endPos = link.lastIndexOf(&#x27;/&#x27;) + 1;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    var toprocess = [&#x27;excerpt&#x27;, &#x27;more&#x27;, &#x27;content&#x27;];</span><br><span class="line">    for(var i = 0; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      var key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      var $ = cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: false,</span><br><span class="line">        xmlMode: false,</span><br><span class="line">        lowerCaseTags: false,</span><br><span class="line">        decodeEntities: false</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(&#x27;img&#x27;).each(function()&#123;</span><br><span class="line">		if ($(this).attr(&#x27;src&#x27;))&#123;</span><br><span class="line">			// For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span><br><span class="line">			var src = $(this).attr(&#x27;src&#x27;).replace(&#x27;\\&#x27;, &#x27;/&#x27;);</span><br><span class="line">			if(!/http[s]*.*|\/\/.*/.test(src) &amp;&amp;</span><br><span class="line">			   !/^\s*\//.test(src)) &#123;</span><br><span class="line">			  // For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span><br><span class="line">			  // In addition, to support multi-level local directory.</span><br><span class="line">			  var linkArray = link.split(&#x27;/&#x27;).filter(function(elem)&#123;</span><br><span class="line">				return elem != &#x27;&#x27;;</span><br><span class="line">			  &#125;);</span><br><span class="line">			  var srcArray = src.split(&#x27;/&#x27;).filter(function(elem)&#123;</span><br><span class="line">				return elem != &#x27;&#x27; &amp;&amp; elem != &#x27;.&#x27;;</span><br><span class="line">			  &#125;);</span><br><span class="line">			  if(srcArray.length &gt; 1)</span><br><span class="line">				srcArray.shift();</span><br><span class="line">			  src = srcArray.join(&#x27;/&#x27;);</span><br><span class="line">			  $(this).attr(&#x27;src&#x27;, config.root + link + src);</span><br><span class="line">			  console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;else&#123;</span><br><span class="line">			console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);</span><br><span class="line">			console.info&amp;&amp;console.info($(this));</span><br><span class="line">		&#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaGeneric</title>
    <url>/2021/09/17/JavaGeneric/</url>
    <content><![CDATA[<h4 id="什么是泛型"><a href="#什么是泛型" class="headerlink" title="什么是泛型"></a>什么是泛型</h4><ul>
<li><h5 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h5><ul>
<li>List默认是Object，类型不确定，<strong>运行期</strong>类型转换异常</li>
</ul>
</li>
<li><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><ul>
<li>泛型（generics）是jdk5引入，提供编译时安全监测机制，泛型的本质是<strong>参数化类型</strong>。</li>
</ul>
</li>
<li><h5 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h5><ul>
<li>类型安全</li>
<li>消除强制类型的转换</li>
</ul>
</li>
</ul>
<h4 id="泛型类、泛型接口"><a href="#泛型类、泛型接口" class="headerlink" title="泛型类、泛型接口"></a>泛型类、泛型接口</h4><ul>
<li><h5 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h5><ul>
<li><h6 id="定义语法"><a href="#定义语法" class="headerlink" title="定义语法"></a>定义语法</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>  类名&lt;泛型标识,泛型标识，...&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> 泛型标识 变量名;</span><br><span class="line">  .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.generics;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 泛型类定义</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; 泛型标识，类型形参 T创建对象的时候指定具体的类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericsExample</span>&lt;<span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> T k;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">GenericsExample</span><span class="params">(T k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.k = k;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> T <span class="title">getK</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setK</span><span class="params">(T k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.k = k;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;GenericsExample&#123;&quot;</span> +</span><br><span class="line">        <span class="string">&quot;k=&quot;</span> + k +</span><br><span class="line">        <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><h6 id="常用的泛型标识T、E、K、V"><a href="#常用的泛型标识T、E、K、V" class="headerlink" title="常用的泛型标识T、E、K、V"></a>常用的泛型标识T、E、K、V</h6></li>
<li><h6 id="使用语法"><a href="#使用语法" class="headerlink" title="使用语法"></a>使用语法</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">类名&lt;具体的数据类型&gt; 对象名 =  <span class="keyword">new</span> 类名&lt;具体的数据类型&gt;();</span><br><span class="line">jdk1<span class="number">.7</span>之后，后面的具体数据类型可以不写。</span><br><span class="line">类名&lt;具体的数据类型&gt; 对象名 =  <span class="keyword">new</span> 类名&lt;&gt;();</span><br></pre></td></tr></table></figure>

<p><img src="/2021/09/17/JavaGeneric/image-20210917101934874.png" alt="image-20210917101934874"></p>
</li>
<li><h6 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h6><ul>
<li><p>没有使用具体类型，默认为Object</p>
</li>
<li><p>泛型类不支持基本数据类型。</p>
</li>
<li><p>同一泛型类，根据不同数据类型创建的对象，本质上是同一类型。</p>
<p><img src="/2021/09/17/JavaGeneric/image-20210917182735304.png" alt="image-20210917182735304"></p>
</li>
</ul>
</li>
<li><h6 id="泛型类派生子类"><a href="#泛型类派生子类" class="headerlink" title="泛型类派生子类"></a>泛型类派生子类</h6><ul>
<li><p>子类也是泛型类，子类和父类的泛型类要一致</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChildGeneric</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">ParentGeneric</span>&lt;<span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ChildGeneric</span>&lt;<span class="title">T</span>,<span class="title">K</span>&gt; <span class="keyword">extends</span> <span class="title">ParentGeneric</span>&lt;<span class="title">T</span>&gt; //可以拓展，但是必须含有父类泛型</span></span><br></pre></td></tr></table></figure></li>
<li><p>子类不是泛型类，父类要明确泛型的数据类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChildGeneric</span> <span class="keyword">extends</span> <span class="title">ParentGeneric</span>&lt;<span class="title">String</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>如果子类继承父类，父类也没有写具体数据类型，默认是Object类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChildGeneric</span> <span class="keyword">extends</span> <span class="title">ParentGeneric</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><h5 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h5><ul>
<li><h6 id="定义语法-1"><a href="#定义语法-1" class="headerlink" title="定义语法"></a>定义语法</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> 接口名称&lt;泛型标识，泛型标识，...&gt; </span>&#123;</span><br><span class="line">  泛型标识 方法名称();</span><br><span class="line">  ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><h6 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h6><ul>
<li>实现类不是泛型类，接口要明确数据类型</li>
<li>实现类也是泛型类，实现类要和接口的泛型类型一致</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h4><ul>
<li><p>泛型类：是在实例化类的时候指明泛型的具体类型。</p>
</li>
<li><p>泛型方法：是在调用方法的时候指明泛型的具体类型</p>
<h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 &lt;T,E,...&gt; 返回值类型 方法名(形参列表)&#123;</span><br><span class="line">  方法体...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.generics;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericMethod</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">getTaa</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = Integer.parseInt((String) t);</span><br><span class="line">    System.out.println(i + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>public 与返回值之间的<T>非常重要，可以理解为声明此方法是泛型方法。</T></li>
<li>只有声明了<T>的方法才是泛型方法，泛型类中使用了泛型的成员方法不是泛型方法。</T></li>
<li><T>表明该方法是使用泛型T，此时才可以在方法中使用泛型T</T></li>
<li>与泛型类类似，此处T可以随便写为任意标识，，常见的T，E，K，V</li>
</ul>
</li>
</ul>
<h4 id="类型通配符"><a href="#类型通配符" class="headerlink" title="类型通配符"></a>类型通配符</h4><h4 id="类型擦除"><a href="#类型擦除" class="headerlink" title="类型擦除"></a>类型擦除</h4><h4 id="泛型和数组"><a href="#泛型和数组" class="headerlink" title="泛型和数组"></a>泛型和数组</h4><h4 id="泛型和反射"><a href="#泛型和反射" class="headerlink" title="泛型和反射"></a>泛型和反射</h4>]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>javaGeneric</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/09/16/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link" href="https://hexo.io/">Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very first post. Check <a class="link" href="https://hexo.io/docs/">documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link" href="https://hexo.io/docs/troubleshooting.html">troubleshooting<i class="fas fa-external-link-alt"></i></a> or you can ask me on <a class="link" href="https://github.com/hexojs/hexo/issues">GitHub<i class="fas fa-external-link-alt"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a class="link" href="https://hexo.io/docs/writing.html">Writing<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link" href="https://hexo.io/docs/server.html">Server<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link" href="https://hexo.io/docs/generating.html">Generating<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link" href="https://hexo.io/docs/one-command-deployment.html">Deployment<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
